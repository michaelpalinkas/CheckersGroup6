
public class AlphaBetaSearch {

	private String bestAction;
	
	public AlphaBetaSearch () {

		String bestAction = "";
	}
	
	public String getBestAction () {
		return bestAction;
	}
	
	public double decision(GameState state, int depth, double alpha, double beta, boolean minOrMax, boolean initial) {
		
		if (depth == 0 || state.isTerminal()) {
			return (state.utility(state.player()));
		}
		
		if (minOrMax) {		//maximizing, Black to play
			double best = -100000;
			
			for (int i = state.actions().size()-1; i >= 0; i--) {
				String s = state.actions().get(i);
				alpha = Math.max(alpha, decision(state.result(s), depth-1, alpha, beta, false, false));
				
				if (alpha > best) {
					best = alpha;
					if (initial) {
						bestAction = s;
					}
				}
				
				if (beta <= alpha) {
					break; //beta cutoff
				}
			}
			
			return alpha;
		}
		else {		//minimizing, white to play
			double best = 100000;
			
			for (int i = state.actions().size(); i >= 0; i--) {
				String s = state.actions().get(i);
				beta = Math.min(beta, decision(state.result(s), depth-1, alpha, beta, true, false));
				
				if (beta < best) {
					best = beta;
					if (initial) {
						bestAction = s;
					}
				}
				
				if (beta <= alpha) {
					break; //alpha cutoff
				}
			}
			
			return beta;
		}
	}
}
